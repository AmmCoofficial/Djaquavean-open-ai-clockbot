<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Greeting</title>
    <style>
        body {
            text-align: center;
            font-family: Arial, sans-serif;
            background-color: black;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            flex-direction: column;
            overflow: hidden;
            position: relative;
        }

        @keyframes waves {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }

        body::before {
            content: "";
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, blue, black, purple);
            background-size: 200% 200%;
            animation: waves 5s infinite alternate ease-in-out;
            z-index: -1;
        }

        .hidden { opacity: 0; transition: opacity 1s ease-in-out; display: none; }
        .visible { opacity: 1; transition: opacity 1s ease-in-out; display: block; }
        .button {
            background-color: green;
            color: white;
            padding: 15px 30px;
            font-size: 20px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
        }
        .bubble-text, #greeting, #renameContainer, #namePrompt {
            font-size: 32px;
            font-weight: bold;
            color: yellow;
            text-shadow: 0 0 10px yellow, 0 0 20px orange, 0 0 30px red;
            animation: flash 1s infinite alternate;
        }
        #nameInput, #renameInput {
            font-size: 22px;
            padding: 10px;
            width: 300px;
            text-align: center;
            border: 2px solid yellow;
            border-radius: 10px;
            outline: none;
            background-color: black;
            color: white;
            text-shadow: 0 0 10px yellow;
            box-shadow: 0 0 20px yellow;
            transition: all 0.3s ease-in-out;
        }
        #nameInput:focus, #renameInput:focus {
            box-shadow: 0 0 25px orange;
            border-color: orange;
        }
        #confirmButton {
            margin-top: 15px;
            padding: 10px 20px;
            font-size: 18px;
            border: none;
            cursor: pointer;
            border-radius: 5px;
            background-color: green;
            color: white;
            display: none;
        }
        #renameContainer.fade-out {
            opacity: 0;
            transition: opacity 1s ease-in-out;
        }

        /* Balls animation for transition */
        @keyframes fillScreen {
            0% {
                transform: scale(0);
                opacity: 1;
            }
            100% {
                transform: scale(25);
                opacity: 0;
            }
        }

        .ball {
            position: absolute;
            border-radius: 50%;
            width: 50px;
            height: 50px;
            animation: fillScreen 1.5s ease-out forwards;
        }

        .ball-container {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 10;
            pointer-events: none;
        }

        /* Dashboard styles */
        #dashboard {
            font-size: 24px;
            color: white;
            background-color: #222;
            border-radius: 10px;
            padding: 20px;
            margin-top: 20px;
            display: none;
        }
        #clock, #date, #temperature {
            margin: 10px 0;
        }

        /* Final Greeting Glow effect */
        @keyframes glow {
            0% { text-shadow: 0 0 10px yellow, 0 0 20px orange, 0 0 30px red; }
            50% { text-shadow: 0 0 25px blue, 0 0 40px purple, 0 0 60px pink; }
            100% { text-shadow: 0 0 30px green, 0 0 50px cyan, 0 0 70px magenta; }
        }
        #finalGreeting {
            font-size: 48px;
            font-weight: bolder;
            color: white;
            animation: glow 1.5s infinite alternate;
        }
    </style>
</head>
<body>
    <button class="button" onclick="startSequence()">Start</button>
    <div id="helloText" class="hidden bubble-text">Hello</div>
    <div id="nameContainer" class="hidden">
        <div id="namePrompt">What is your name?</div>
        <input id="nameInput" type="text" oninput="showConfirmButton()" onkeydown="checkEnter(event, 'submitName')">
        <button id="confirmButton" onclick="submitName()">Confirm</button>
    </div>
    <div id="greeting" class="hidden"></div>
    <div id="renameContainer" class="hidden">
        <div>My name is:</div>
        <input id="renameInput" type="text" placeholder="Djaquavian" onkeydown="checkEnter(event, 'finalizeName')">
        <button id="defaultNameButton" onclick="useDefaultName()">Use Default Name</button>
        <button onclick="finalizeName()">Confirm</button>
    </div>
    <div class="ball-container" id="ballContainer"></div>
    
    <!-- Dashboard Section -->
    <div id="dashboard">
        <div id="clock">Clock: Loading...</div>
        <div id="date">Date: Loading...</div>
        <div id="temperature">Temperature: Loading...</div>
    </div>

    <script>
        function getRandomColor() {
            const colors = [
                "red", "blue", "green", "yellow", "purple", "cyan", "orange", "pink", "lime", "magenta"
            ];
            return colors[Math.floor(Math.random() * colors.length)];
        }

        function createBalls() {
            const ballContainer = document.getElementById('ballContainer');
            for (let i = 0; i < 20; i++) {
                const ball = document.createElement('div');
                ball.classList.add('ball');
                ball.style.backgroundColor = getRandomColor();  // Randomize ball color
                ball.style.top = `${Math.random() * 100}%`;
                ball.style.left = `${Math.random() * 100}%`;
                ball.style.animationDelay = `${Math.random() * 0.5}s`;
                ballContainer.appendChild(ball);
            }
        }

        function fadeIn(element) {
            element.style.display = 'block';
            setTimeout(() => { element.classList.add('visible'); }, 10);
        }
        
        function fadeOut(element) {
            element.classList.remove('visible');
            setTimeout(() => { element.style.display = 'none'; }, 1000);
        }

        function startSequence() {
            document.querySelector('.button').style.display = 'none';
            createBalls();  // Add balls before starting the sequence
            setTimeout(() => {
                let helloText = document.getElementById('helloText');
                fadeIn(helloText);
                setTimeout(() => {
                    fadeOut(helloText);
                    setTimeout(() => {
                        createBalls();  // Trigger balls transition before name container
                        fadeIn(document.getElementById('nameContainer'));
                    }, 1000);
                }, 2000);
            }, 1500);
        }

        function showConfirmButton() {
            document.getElementById('confirmButton').style.display = 'block';
        }

        function checkEnter(event, action) {
            if (event.key === 'Enter') {
                if (action === 'submitName') {
                    submitName();
                } else if (action === 'finalizeName') {
                    finalizeName();
                }
            }
        }

        function submitName() {
            let name = document.getElementById('nameInput').value.trim();
            if (name === "") {
                alert("Please enter a valid name!");
                return;
            }
            fadeOut(document.getElementById('nameContainer'));
            createBalls();  // Trigger balls transition before showing greeting
            setTimeout(() => {
                let greetingText = document.getElementById('greeting');
                greetingText.innerText = `Hello, ${name}!`;
                fadeIn(greetingText);
                setTimeout(() => {
                    fadeOut(greetingText);
                    setTimeout(() => {
                        createBalls();  // Trigger balls transition before renaming container
                        fadeIn(document.getElementById('renameContainer'));
                    }, 1000);
                }, 3000);
            }, 1500); // Delay showing the next screen until balls finish
        }

        function useDefaultName() {
            document.getElementById('renameInput').value = "Djaquavian";
            finalizeName();
        }

        function finalizeName() {
            let secondName = document.getElementById('renameInput').value.trim();
            if (secondName === "") {
                alert("Please enter a valid name!");
                return;
            }
            fadeOut(document.getElementById('renameContainer'));
            createBalls();  // Trigger balls transition before final greeting
            setTimeout(() => {
                let finalGreeting = document.getElementById('greeting');
                finalGreeting.id = "finalGreeting"; // Adding the glowing effect to the final greeting
                finalGreeting.innerHTML = `Hello, I'm ${secondName},<br>and I will be your bedside AI helper.`;
                fadeIn(finalGreeting);
                setTimeout(() => {
                    fadeOut(finalGreeting);
                    setTimeout(() => {
                        fadeIn(document.getElementById('dashboard'));
                        updateDashboard();
                    }, 1000); // Delay showing dashboard until final greeting fades out
                }, 3000);
            }, 1500); // Delay showing the final greeting until balls finish
        }

        // Update the clock, date, and temperature
        function updateDashboard() {
            const clock = document.getElementById('clock');
            const date = document.getElementById('date');
            const temperature = document.getElementById('temperature');
            
            // Update date
            const today = new Date();
            date.innerText = `Date: ${today.toDateString()}`;
            
            // Update clock
            setInterval(() => {
                const time = new Date();
                clock.innerText = `Clock: ${time.toLocaleTimeString()}`;
            }, 1000);
            
            // Fetch temperature using the OpenWeatherMap API
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(position => {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;
                    const apiKey = 'YOUR_API_KEY';  // Replace with your OpenWeatherMap API key
                    const url = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;
                    
                    fetch(url)
                        .then(response => response.json())
                        .then(data => {
                            const temp = data.main.temp;
                            temperature.innerText = `Temperature: ${temp}°C`;
                        })
                        .catch(error => {
                            console.error('Error fetching weather data:', error);
                            temperature.innerText = `Temperature: Unable to retrieve data`;
                        });
                });
            }
        }
    </script>
</body>
</html>
