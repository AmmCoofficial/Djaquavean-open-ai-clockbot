#include <SDL2/SDL.h>
#include <SDL2/SDL_ttf.h>
#include <iostream>
#include <string>
#include <vector>
#include <ctime>
#include <cstdlib>
#include <unistd.h>

const int WIDTH = 500;
const int HEIGHT = 300;

// Define colors
const SDL_Color WHITE = {255, 255, 255};
const SDL_Color BLACK = {0, 0, 0};
const SDL_Color GREEN = {0, 255, 0};

SDL_Window* window;
SDL_Renderer* renderer;
SDL_Texture* createTextTexture(SDL_Renderer* renderer, const std::string& text, SDL_Color color, int fontSize);
void drawStars(SDL_Renderer* renderer);
void fadeOut(SDL_Renderer* renderer, SDL_Texture* textTexture, SDL_Rect textRect);
void fadeIn(SDL_Renderer* renderer, SDL_Texture* textTexture, SDL_Rect textRect);
SDL_Rect drawStartButton(SDL_Renderer* renderer);
void waitForStart(SDL_Renderer* renderer);
std::string promptName(const std::string& prompt);

int main(int argc, char* argv[]) {
    // Initialize SDL
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        std::cerr << "Failed to initialize SDL: " << SDL_GetError() << std::endl;
        return 1;
    }

    if (TTF_Init() < 0) {
        std::cerr << "Failed to initialize SDL_ttf: " << TTF_GetError() << std::endl;
        return 1;
    }

    // Create window and renderer
    window = SDL_CreateWindow("Hello Bubble Fade", SDL_WINDOWPOS_UNDEFINED, SDL_WINDOWPOS_UNDEFINED, WIDTH, HEIGHT, SDL_WINDOW_SHOWN);
    renderer = SDL_CreateRenderer(window, -1, SDL_RENDERER_ACCELERATED);

    // Seed random number generator
    std::srand(static_cast<unsigned>(std::time(0)));

    drawStars(renderer);
    waitForStart(renderer);

    // Display initial message
    drawStars(renderer);
    SDL_Texture* helloTexture = createTextTexture(renderer, "HELLO", WHITE, 100);
    SDL_Rect helloRect = {WIDTH / 2 - 100, HEIGHT / 2 - 50, 200, 100};
    SDL_RenderCopy(renderer, helloTexture, nullptr, &helloRect);
    SDL_RenderPresent(renderer);
    sleep(1);

    // Ask for user's name
    std::string userName = promptName("What is your name? ");
    
    // Update text with user's name
    std::string greetingText = "HELLO " + userName;
    SDL_Texture* greetingTexture = createTextTexture(renderer, greetingText, WHITE, 100);
    SDL_Rect greetingRect = {WIDTH / 2 - 100, HEIGHT / 2 - 50, 200, 100};
    
    drawStars(renderer);
    SDL_RenderCopy(renderer, greetingTexture, nullptr, &greetingRect);
    SDL_RenderPresent(renderer);
    sleep(1);
    
    fadeOut(renderer, greetingTexture, greetingRect);
    
    // Create final greeting
    std::string finalGreetingText = "Hello " + userName + "!";
    SDL_Texture* finalGreetingTexture = createTextTexture(renderer, finalGreetingText, WHITE, 100);
    SDL_Rect finalGreetingRect = {WIDTH / 2 - 100, HEIGHT / 2 - 50, 200, 100};
    
    fadeIn(renderer, finalGreetingTexture, finalGreetingRect);
    sleep(2);
    fadeOut(renderer, finalGreetingTexture, finalGreetingRect);
    sleep(3);
    
    // Ask for a name or use default
    std::string defaultName = "Djaquaevian";
    std::string enteredName = promptName("Hello, my name is... (Press Enter to use default: Djaquaevian) ");
    if (enteredName.empty()) {
        enteredName = defaultName;
    }
    
    // Create new introduction text
    std::string introText = "Hello, my name is " + enteredName + "!";
    SDL_Texture* introTexture = createTextTexture(renderer, introText, WHITE, 100);
    SDL_Rect introRect = {WIDTH / 2 - 150, HEIGHT / 2 - 50, 300, 100};
    
    fadeIn(renderer, introTexture, introRect);
    sleep(2);
    
    // Clean up and quit
    SDL_DestroyTexture(helloTexture);
    SDL_DestroyTexture(greetingTexture);
    SDL_DestroyTexture(finalGreetingTexture);
    SDL_DestroyTexture(introTexture);
    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    TTF_Quit();
    SDL_Quit();
    
    return 0;
}

SDL_Texture* createTextTexture(SDL_Renderer* renderer, const std::string& text, SDL_Color color, int fontSize) {
    TTF_Font* font = TTF_OpenFont("/path/to/font.ttf", fontSize);
    if (!font) {
        std::cerr << "Failed to open font: " << TTF_GetError() << std::endl;
        exit(1);
    }
    SDL_Surface* surface = TTF_RenderText_Solid(font, text.c_str(), color);
    SDL_Texture* texture = SDL_CreateTextureFromSurface(renderer, surface);
    SDL_FreeSurface(surface);
    TTF_CloseFont(font);
    return texture;
}

void drawStars(SDL_Renderer* renderer) {
    SDL_SetRenderDrawColor(renderer, BLACK.r, BLACK.g, BLACK.b, SDL_ALPHA_OPAQUE);
    SDL_RenderClear(renderer);
    SDL_SetRenderDrawColor(renderer, WHITE.r, WHITE.g, WHITE.b, SDL_ALPHA_OPAQUE);
    for (int i = 0; i < 100; ++i) {
        int x = std::rand() % WIDTH;
        int y = std::rand() % HEIGHT;
        SDL_RenderDrawPoint(renderer, x, y);
    }
}

void fadeOut(SDL_Renderer* renderer, SDL_Texture* textTexture, SDL_Rect textRect) {
    for (int alpha = 255; alpha >=
